apply plugin: 'spring-boot'
mainClassName = "com.example.Application"
applicationDefaultJvmArgs = [
        '-Xms256m', '-Xmx512M', '-Djava.security.egd=file:/dev/./urandom'
]

ext {
    backendVolume = '../../docker/volume-backend/'
    logVolume = '../../docker/volume-log/'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-rest:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
    //compile("org.springframework.data:spring-data-rest-hal-browser:2.2.4.RELEASE")
    compile project(':model')
    compile project(':bootstrap')
}

task unzip(type: Copy) {
    def zipFile = file('build/distributions/backend.zip')
    def outputDir = file("$backendVolume")

    from zipTree(zipFile)
    into outputDir

    mkdir("$logVolume")
}
unzip.mustRunAfter distZip // required to run parallel builds

clean {
    delete "$backendVolume/*"
    delete "$logVolume/*"
}

build {
    dependsOn unzip
}

if (environment == 'test') {
    dependencies {
        runtime("com.h2database:h2") // version picked up from spring boot gradle ResolutionStrategy
    }
}
if (environment == 'dev') {
    dependencies {
        runtime("org.mariadb.jdbc:mariadb-java-client:1.2.3")
    }
}